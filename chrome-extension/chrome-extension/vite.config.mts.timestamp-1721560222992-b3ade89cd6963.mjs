// vite.config.mts
import { defineConfig } from "file:///E:/Chat-Evaluator-llama3-hackathon/chrome-extension/node_modules/.pnpm/vite@5.3.3_@types+node@20.14.11_terser@5.31.3/node_modules/vite/dist/node/index.js";
import { resolve as resolve2 } from "path";
import libAssetsPlugin from "file:///E:/Chat-Evaluator-llama3-hackathon/chrome-extension/node_modules/.pnpm/@laynezh+vite-plugin-lib-assets@0.5.23_vite@5.3.3_@types+node@20.14.11_terser@5.31.3_/node_modules/@laynezh/vite-plugin-lib-assets/dist/index.js";

// utils/plugins/make-manifest-plugin.ts
import * as fs from "fs";
import * as path from "path";
import { ManifestParser, colorLog } from "file:///E:/Chat-Evaluator-llama3-hackathon/chrome-extension/packages/dev-utils/dist/index.js";
import { pathToFileURL } from "url";
import * as process2 from "process";
var __vite_injected_original_dirname = "E:\\Chat-Evaluator-llama3-hackathon\\chrome-extension\\chrome-extension\\utils\\plugins";
var { resolve } = path;
var rootDir = resolve(__vite_injected_original_dirname, "..", "..");
var manifestFile = resolve(rootDir, "manifest.js");
var getManifestWithCacheBurst = () => {
  const withCacheBurst = (path2) => `${path2}?${Date.now().toString()}`;
  if (process2.platform === "win32") {
    return import(withCacheBurst(pathToFileURL(manifestFile).href));
  }
  return import(withCacheBurst(manifestFile));
};
function makeManifestPlugin(config) {
  function makeManifest(manifest, to) {
    if (!fs.existsSync(to)) {
      fs.mkdirSync(to);
    }
    const manifestPath = resolve(to, "manifest.json");
    const isFirefox = process2.env.__FIREFOX__;
    fs.writeFileSync(manifestPath, ManifestParser.convertManifestToString(manifest, isFirefox ? "firefox" : "chrome"));
    colorLog(`Manifest file copy complete: ${manifestPath}`, "success");
  }
  return {
    name: "make-manifest",
    buildStart() {
      this.addWatchFile(manifestFile);
    },
    async writeBundle() {
      const outDir2 = config.outDir;
      const manifest = await getManifestWithCacheBurst();
      makeManifest(manifest.default, outDir2);
    }
  };
}

// vite.config.mts
import { watchPublicPlugin, watchRebuildPlugin } from "file:///E:/Chat-Evaluator-llama3-hackathon/chrome-extension/packages/hmr/dist/index.js";
var __vite_injected_original_dirname2 = "E:\\Chat-Evaluator-llama3-hackathon\\chrome-extension\\chrome-extension";
var rootDir2 = resolve2(__vite_injected_original_dirname2);
var libDir = resolve2(rootDir2, "lib");
var isDev = process.env.__DEV__ === "true";
var isProduction = !isDev;
var outDir = resolve2(rootDir2, "..", "dist");
var vite_config_default = defineConfig({
  resolve: {
    alias: {
      "@root": rootDir2,
      "@lib": libDir,
      "@assets": resolve2(libDir, "assets")
    }
  },
  plugins: [
    libAssetsPlugin({
      outputPath: outDir
    }),
    watchPublicPlugin(),
    makeManifestPlugin({ outDir }),
    isDev && watchRebuildPlugin({ reload: true })
  ],
  publicDir: resolve2(rootDir2, "public"),
  build: {
    lib: {
      formats: ["iife"],
      entry: resolve2(__vite_injected_original_dirname2, "lib/background/index.ts"),
      name: "BackgroundScript",
      fileName: "background"
    },
    outDir,
    emptyOutDir: false,
    sourcemap: isDev,
    minify: isProduction,
    reportCompressedSize: isProduction,
    modulePreload: true,
    rollupOptions: {
      external: ["chrome"]
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcubXRzIiwgInV0aWxzL3BsdWdpbnMvbWFrZS1tYW5pZmVzdC1wbHVnaW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOlxcXFxDaGF0LUV2YWx1YXRvci1sbGFtYTMtaGFja2F0aG9uXFxcXGNocm9tZS1leHRlbnNpb25cXFxcY2hyb21lLWV4dGVuc2lvblwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRTpcXFxcQ2hhdC1FdmFsdWF0b3ItbGxhbWEzLWhhY2thdGhvblxcXFxjaHJvbWUtZXh0ZW5zaW9uXFxcXGNocm9tZS1leHRlbnNpb25cXFxcdml0ZS5jb25maWcubXRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9FOi9DaGF0LUV2YWx1YXRvci1sbGFtYTMtaGFja2F0aG9uL2Nocm9tZS1leHRlbnNpb24vY2hyb21lLWV4dGVuc2lvbi92aXRlLmNvbmZpZy5tdHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcclxuaW1wb3J0IHsgcmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgbGliQXNzZXRzUGx1Z2luIGZyb20gJ0BsYXluZXpoL3ZpdGUtcGx1Z2luLWxpYi1hc3NldHMnO1xyXG5pbXBvcnQgbWFrZU1hbmlmZXN0UGx1Z2luIGZyb20gJy4vdXRpbHMvcGx1Z2lucy9tYWtlLW1hbmlmZXN0LXBsdWdpbic7XHJcbmltcG9ydCB7IHdhdGNoUHVibGljUGx1Z2luLCB3YXRjaFJlYnVpbGRQbHVnaW4gfSBmcm9tICdAY2hyb21lLWV4dGVuc2lvbi1ib2lsZXJwbGF0ZS9obXInO1xyXG5cclxuY29uc3Qgcm9vdERpciA9IHJlc29sdmUoX19kaXJuYW1lKTtcclxuY29uc3QgbGliRGlyID0gcmVzb2x2ZShyb290RGlyLCAnbGliJyk7XHJcblxyXG5jb25zdCBpc0RldiA9IHByb2Nlc3MuZW52Ll9fREVWX18gPT09ICd0cnVlJztcclxuY29uc3QgaXNQcm9kdWN0aW9uID0gIWlzRGV2O1xyXG5cclxuY29uc3Qgb3V0RGlyID0gcmVzb2x2ZShyb290RGlyLCAnLi4nLCAnZGlzdCcpO1xyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIHJlc29sdmU6IHtcclxuICAgIGFsaWFzOiB7XHJcbiAgICAgICdAcm9vdCc6IHJvb3REaXIsXHJcbiAgICAgICdAbGliJzogbGliRGlyLFxyXG4gICAgICAnQGFzc2V0cyc6IHJlc29sdmUobGliRGlyLCAnYXNzZXRzJyksXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgcGx1Z2luczogW1xyXG4gICAgbGliQXNzZXRzUGx1Z2luKHtcclxuICAgICAgb3V0cHV0UGF0aDogb3V0RGlyLFxyXG4gICAgfSksXHJcbiAgICB3YXRjaFB1YmxpY1BsdWdpbigpLFxyXG4gICAgbWFrZU1hbmlmZXN0UGx1Z2luKHsgb3V0RGlyIH0pLFxyXG4gICAgaXNEZXYgJiYgd2F0Y2hSZWJ1aWxkUGx1Z2luKHsgcmVsb2FkOiB0cnVlIH0pLFxyXG4gIF0sXHJcbiAgcHVibGljRGlyOiByZXNvbHZlKHJvb3REaXIsICdwdWJsaWMnKSxcclxuICBidWlsZDoge1xyXG4gICAgbGliOiB7XHJcbiAgICAgIGZvcm1hdHM6IFsnaWlmZSddLFxyXG4gICAgICBlbnRyeTogcmVzb2x2ZShfX2Rpcm5hbWUsICdsaWIvYmFja2dyb3VuZC9pbmRleC50cycpLFxyXG4gICAgICBuYW1lOiAnQmFja2dyb3VuZFNjcmlwdCcsXHJcbiAgICAgIGZpbGVOYW1lOiAnYmFja2dyb3VuZCcsXHJcbiAgICB9LFxyXG4gICAgb3V0RGlyLFxyXG4gICAgZW1wdHlPdXREaXI6IGZhbHNlLFxyXG4gICAgc291cmNlbWFwOiBpc0RldixcclxuICAgIG1pbmlmeTogaXNQcm9kdWN0aW9uLFxyXG4gICAgcmVwb3J0Q29tcHJlc3NlZFNpemU6IGlzUHJvZHVjdGlvbixcclxuICAgIG1vZHVsZVByZWxvYWQ6IHRydWUsXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGV4dGVybmFsOiBbJ2Nocm9tZSddLFxyXG4gICAgfSxcclxuICB9LFxyXG59KTtcclxuIiwgImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJFOlxcXFxDaGF0LUV2YWx1YXRvci1sbGFtYTMtaGFja2F0aG9uXFxcXGNocm9tZS1leHRlbnNpb25cXFxcY2hyb21lLWV4dGVuc2lvblxcXFx1dGlsc1xcXFxwbHVnaW5zXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJFOlxcXFxDaGF0LUV2YWx1YXRvci1sbGFtYTMtaGFja2F0aG9uXFxcXGNocm9tZS1leHRlbnNpb25cXFxcY2hyb21lLWV4dGVuc2lvblxcXFx1dGlsc1xcXFxwbHVnaW5zXFxcXG1ha2UtbWFuaWZlc3QtcGx1Z2luLnRzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9FOi9DaGF0LUV2YWx1YXRvci1sbGFtYTMtaGFja2F0aG9uL2Nocm9tZS1leHRlbnNpb24vY2hyb21lLWV4dGVuc2lvbi91dGlscy9wbHVnaW5zL21ha2UtbWFuaWZlc3QtcGx1Z2luLnRzXCI7aW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBNYW5pZmVzdFBhcnNlciwgY29sb3JMb2cgfSBmcm9tICdAY2hyb21lLWV4dGVuc2lvbi1ib2lsZXJwbGF0ZS9kZXYtdXRpbHMnO1xyXG5pbXBvcnQgdHlwZSB7IFBsdWdpbk9wdGlvbiB9IGZyb20gJ3ZpdGUnO1xyXG5pbXBvcnQgeyBwYXRoVG9GaWxlVVJMIH0gZnJvbSAndXJsJztcclxuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcclxuXHJcbmNvbnN0IHsgcmVzb2x2ZSB9ID0gcGF0aDtcclxuXHJcbmNvbnN0IHJvb3REaXIgPSByZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJyk7XHJcbmNvbnN0IG1hbmlmZXN0RmlsZSA9IHJlc29sdmUocm9vdERpciwgJ21hbmlmZXN0LmpzJyk7XHJcblxyXG5jb25zdCBnZXRNYW5pZmVzdFdpdGhDYWNoZUJ1cnN0ID0gKCk6IFByb21pc2U8eyBkZWZhdWx0OiBjaHJvbWUucnVudGltZS5NYW5pZmVzdFYzIH0+ID0+IHtcclxuICBjb25zdCB3aXRoQ2FjaGVCdXJzdCA9IChwYXRoOiBzdHJpbmcpID0+IGAke3BhdGh9PyR7RGF0ZS5ub3coKS50b1N0cmluZygpfWA7XHJcbiAgLyoqXHJcbiAgICogSW4gV2luZG93cywgaW1wb3J0KCkgZG9lc24ndCB3b3JrIHdpdGhvdXQgZmlsZTovLyBwcm90b2NvbC5cclxuICAgKiBTbywgd2UgbmVlZCB0byBjb252ZXJ0IHBhdGggdG8gZmlsZTovLyBwcm90b2NvbC4gKHVybC5wYXRoVG9GaWxlVVJMKVxyXG4gICAqL1xyXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInKSB7XHJcbiAgICByZXR1cm4gaW1wb3J0KHdpdGhDYWNoZUJ1cnN0KHBhdGhUb0ZpbGVVUkwobWFuaWZlc3RGaWxlKS5ocmVmKSk7XHJcbiAgfVxyXG4gIHJldHVybiBpbXBvcnQod2l0aENhY2hlQnVyc3QobWFuaWZlc3RGaWxlKSk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlTWFuaWZlc3RQbHVnaW4oY29uZmlnOiB7IG91dERpcjogc3RyaW5nIH0pOiBQbHVnaW5PcHRpb24ge1xyXG4gIGZ1bmN0aW9uIG1ha2VNYW5pZmVzdChtYW5pZmVzdDogY2hyb21lLnJ1bnRpbWUuTWFuaWZlc3RWMywgdG86IHN0cmluZykge1xyXG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKHRvKSkge1xyXG4gICAgICBmcy5ta2RpclN5bmModG8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFuaWZlc3RQYXRoID0gcmVzb2x2ZSh0bywgJ21hbmlmZXN0Lmpzb24nKTtcclxuXHJcbiAgICBjb25zdCBpc0ZpcmVmb3ggPSBwcm9jZXNzLmVudi5fX0ZJUkVGT1hfXztcclxuICAgIGZzLndyaXRlRmlsZVN5bmMobWFuaWZlc3RQYXRoLCBNYW5pZmVzdFBhcnNlci5jb252ZXJ0TWFuaWZlc3RUb1N0cmluZyhtYW5pZmVzdCwgaXNGaXJlZm94ID8gJ2ZpcmVmb3gnIDogJ2Nocm9tZScpKTtcclxuXHJcbiAgICBjb2xvckxvZyhgTWFuaWZlc3QgZmlsZSBjb3B5IGNvbXBsZXRlOiAke21hbmlmZXN0UGF0aH1gLCAnc3VjY2VzcycpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICdtYWtlLW1hbmlmZXN0JyxcclxuICAgIGJ1aWxkU3RhcnQoKSB7XHJcbiAgICAgIHRoaXMuYWRkV2F0Y2hGaWxlKG1hbmlmZXN0RmlsZSk7XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgd3JpdGVCdW5kbGUoKSB7XHJcbiAgICAgIGNvbnN0IG91dERpciA9IGNvbmZpZy5vdXREaXI7XHJcbiAgICAgIGNvbnN0IG1hbmlmZXN0ID0gYXdhaXQgZ2V0TWFuaWZlc3RXaXRoQ2FjaGVCdXJzdCgpO1xyXG4gICAgICBtYWtlTWFuaWZlc3QobWFuaWZlc3QuZGVmYXVsdCwgb3V0RGlyKTtcclxuICAgIH0sXHJcbiAgfTtcclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQXdZLFNBQVMsb0JBQW9CO0FBQ3JhLFNBQVMsV0FBQUEsZ0JBQWU7QUFDeEIsT0FBTyxxQkFBcUI7OztBQ0YwYSxZQUFZLFFBQVE7QUFDMWQsWUFBWSxVQUFVO0FBQ3RCLFNBQVMsZ0JBQWdCLGdCQUFnQjtBQUV6QyxTQUFTLHFCQUFxQjtBQUM5QixZQUFZQyxjQUFhO0FBTHpCLElBQU0sbUNBQW1DO0FBT3pDLElBQU0sRUFBRSxRQUFRLElBQUk7QUFFcEIsSUFBTSxVQUFVLFFBQVEsa0NBQVcsTUFBTSxJQUFJO0FBQzdDLElBQU0sZUFBZSxRQUFRLFNBQVMsYUFBYTtBQUVuRCxJQUFNLDRCQUE0QixNQUF1RDtBQUN2RixRQUFNLGlCQUFpQixDQUFDQyxVQUFpQixHQUFHQSxLQUFJLElBQUksS0FBSyxJQUFJLEVBQUUsU0FBUyxDQUFDO0FBS3pFLE1BQVksc0JBQWEsU0FBUztBQUNoQyxXQUFPLE9BQU8sZUFBZSxjQUFjLFlBQVksRUFBRSxJQUFJO0FBQUEsRUFDL0Q7QUFDQSxTQUFPLE9BQU8sZUFBZSxZQUFZO0FBQzNDO0FBRWUsU0FBUixtQkFBb0MsUUFBMEM7QUFDbkYsV0FBUyxhQUFhLFVBQXFDLElBQVk7QUFDckUsUUFBSSxDQUFJLGNBQVcsRUFBRSxHQUFHO0FBQ3RCLE1BQUcsYUFBVSxFQUFFO0FBQUEsSUFDakI7QUFDQSxVQUFNLGVBQWUsUUFBUSxJQUFJLGVBQWU7QUFFaEQsVUFBTSxZQUFvQixhQUFJO0FBQzlCLElBQUcsaUJBQWMsY0FBYyxlQUFlLHdCQUF3QixVQUFVLFlBQVksWUFBWSxRQUFRLENBQUM7QUFFakgsYUFBUyxnQ0FBZ0MsWUFBWSxJQUFJLFNBQVM7QUFBQSxFQUNwRTtBQUVBLFNBQU87QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLGFBQWE7QUFDWCxXQUFLLGFBQWEsWUFBWTtBQUFBLElBQ2hDO0FBQUEsSUFDQSxNQUFNLGNBQWM7QUFDbEIsWUFBTUMsVUFBUyxPQUFPO0FBQ3RCLFlBQU0sV0FBVyxNQUFNLDBCQUEwQjtBQUNqRCxtQkFBYSxTQUFTLFNBQVNBLE9BQU07QUFBQSxJQUN2QztBQUFBLEVBQ0Y7QUFDRjs7O0FENUNBLFNBQVMsbUJBQW1CLDBCQUEwQjtBQUp0RCxJQUFNQyxvQ0FBbUM7QUFNekMsSUFBTUMsV0FBVUMsU0FBUUMsaUNBQVM7QUFDakMsSUFBTSxTQUFTRCxTQUFRRCxVQUFTLEtBQUs7QUFFckMsSUFBTSxRQUFRLFFBQVEsSUFBSSxZQUFZO0FBQ3RDLElBQU0sZUFBZSxDQUFDO0FBRXRCLElBQU0sU0FBU0MsU0FBUUQsVUFBUyxNQUFNLE1BQU07QUFDNUMsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDMUIsU0FBUztBQUFBLElBQ1AsT0FBTztBQUFBLE1BQ0wsU0FBU0E7QUFBQSxNQUNULFFBQVE7QUFBQSxNQUNSLFdBQVdDLFNBQVEsUUFBUSxRQUFRO0FBQUEsSUFDckM7QUFBQSxFQUNGO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDUCxnQkFBZ0I7QUFBQSxNQUNkLFlBQVk7QUFBQSxJQUNkLENBQUM7QUFBQSxJQUNELGtCQUFrQjtBQUFBLElBQ2xCLG1CQUFtQixFQUFFLE9BQU8sQ0FBQztBQUFBLElBQzdCLFNBQVMsbUJBQW1CLEVBQUUsUUFBUSxLQUFLLENBQUM7QUFBQSxFQUM5QztBQUFBLEVBQ0EsV0FBV0EsU0FBUUQsVUFBUyxRQUFRO0FBQUEsRUFDcEMsT0FBTztBQUFBLElBQ0wsS0FBSztBQUFBLE1BQ0gsU0FBUyxDQUFDLE1BQU07QUFBQSxNQUNoQixPQUFPQyxTQUFRQyxtQ0FBVyx5QkFBeUI7QUFBQSxNQUNuRCxNQUFNO0FBQUEsTUFDTixVQUFVO0FBQUEsSUFDWjtBQUFBLElBQ0E7QUFBQSxJQUNBLGFBQWE7QUFBQSxJQUNiLFdBQVc7QUFBQSxJQUNYLFFBQVE7QUFBQSxJQUNSLHNCQUFzQjtBQUFBLElBQ3RCLGVBQWU7QUFBQSxJQUNmLGVBQWU7QUFBQSxNQUNiLFVBQVUsQ0FBQyxRQUFRO0FBQUEsSUFDckI7QUFBQSxFQUNGO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFsicmVzb2x2ZSIsICJwcm9jZXNzIiwgInBhdGgiLCAib3V0RGlyIiwgIl9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lIiwgInJvb3REaXIiLCAicmVzb2x2ZSIsICJfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSJdCn0K
